# Nombre del workflow que aparecerá en GitHub Actions
name: Build & Push Docker Image

# Evento que dispara el workflow: push a la rama main
on:
  push:
    branches: [ spring-ci-cd-deploy ] # Cambia a la rama que desees, por ejemplo 'main' o 'master'

jobs:
  # Definición del job principal llamado "docker"
  docker:
    runs-on: ubuntu-latest # El job se ejecuta en un runner de Ubuntu

    steps:
      # Paso 1: Clona el repositorio en el runner
      - uses: actions/checkout@v3

      # Paso 2: Configura Java 21 con Temurin
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Paso 3: Compila el proyecto con Maven, omitiendo los tests
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Paso 4: Inicia sesión en Docker Hub usando secretos
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Paso 5: Construye la imagen Docker con la etiqueta especificada
      - name: Build Docker image
        run: docker build -t ldar01/demo-employees:latest .

      # Paso 6: Sube la imagen Docker a Docker Hub
      - name: Push Docker image
        run: docker push ldar01/demo-employees:latest

    # Job para redeploy en Railway
  re-deploy-railway:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Redeploy Railway
        run: |
          curl -X POST https://backboard.railway.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -d '{"query":"mutation { redeployService(id: \"${{ secrets.RAILWAY_SERVICE_ID }}\") }"}'
